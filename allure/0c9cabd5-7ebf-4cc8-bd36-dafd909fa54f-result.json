{"name": "正常添加", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=138.0.7204.184)\nStacktrace:\n0   chromedriver                        0x000000010112a654 cxxbridge1$str$ptr + 2723108\n1   chromedriver                        0x00000001011228c8 cxxbridge1$str$ptr + 2690968\n2   chromedriver                        0x0000000100c76714 cxxbridge1$string$len + 90428\n3   chromedriver                        0x0000000100c50740 chromedriver + 132928\n4   chromedriver                        0x0000000100ce59e4 cxxbridge1$string$len + 545804\n5   chromedriver                        0x0000000100cfe908 cxxbridge1$string$len + 647984\n6   chromedriver                        0x0000000100cb19c8 cxxbridge1$string$len + 332784\n7   chromedriver                        0x00000001010ee278 cxxbridge1$str$ptr + 2476360\n8   chromedriver                        0x00000001010f150c cxxbridge1$str$ptr + 2489308\n9   chromedriver                        0x00000001010cfa64 cxxbridge1$str$ptr + 2351412\n10  chromedriver                        0x00000001010f1d94 cxxbridge1$str$ptr + 2491492\n11  chromedriver                        0x00000001010c0d58 cxxbridge1$str$ptr + 2290728\n12  chromedriver                        0x0000000101111d60 cxxbridge1$str$ptr + 2622512\n13  chromedriver                        0x0000000101111eec cxxbridge1$str$ptr + 2622908\n14  chromedriver                        0x0000000101122514 cxxbridge1$str$ptr + 2690020\n15  libsystem_pthread.dylib             0x0000000182ebe034 _pthread_start + 136\n16  libsystem_pthread.dylib             0x0000000182eb8e3c thread_start + 8", "trace": "self = <page.page_site.SitePage object at 0x1048a1940>, locator = ('xpath', \"//*[contains(text(), '电站列表')]\")\nimg_info = '电站列表'\n\n    def click_element(self, locator, img_info):\n        \"\"\"\n        点击元素\n        :param locator: 元素定位表达式\n        :param img_info: 错误截图信息\n        :return:\n        \"\"\"\n        try:\n>           self.driver.find_element(*locator).click()\n\ncommon/base_page.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:922: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1048a0980>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000182ebe034 _pthread_start + 136\\\\n16  libsystem_pthread.dylib             0x0000000182eb8e3c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=138.0.7204.184)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010112a654 cxxbridge1$str$ptr + 2723108\nE       1   chromedriver                        0x00000001011228c8 cxxbridge1$str$ptr + 2690968\nE       2   chromedriver                        0x0000000100c76714 cxxbridge1$string$len + 90428\nE       3   chromedriver                        0x0000000100c50740 chromedriver + 132928\nE       4   chromedriver                        0x0000000100ce59e4 cxxbridge1$string$len + 545804\nE       5   chromedriver                        0x0000000100cfe908 cxxbridge1$string$len + 647984\nE       6   chromedriver                        0x0000000100cb19c8 cxxbridge1$string$len + 332784\nE       7   chromedriver                        0x00000001010ee278 cxxbridge1$str$ptr + 2476360\nE       8   chromedriver                        0x00000001010f150c cxxbridge1$str$ptr + 2489308\nE       9   chromedriver                        0x00000001010cfa64 cxxbridge1$str$ptr + 2351412\nE       10  chromedriver                        0x00000001010f1d94 cxxbridge1$str$ptr + 2491492\nE       11  chromedriver                        0x00000001010c0d58 cxxbridge1$str$ptr + 2290728\nE       12  chromedriver                        0x0000000101111d60 cxxbridge1$str$ptr + 2622512\nE       13  chromedriver                        0x0000000101111eec cxxbridge1$str$ptr + 2622908\nE       14  chromedriver                        0x0000000101122514 cxxbridge1$str$ptr + 2690020\nE       15  libsystem_pthread.dylib             0x0000000182ebe034 _pthread_start + 136\nE       16  libsystem_pthread.dylib             0x0000000182eb8e3c thread_start + 8\n\n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_3_device_add.TestDetector object at 0x104860b90>\ncase = {'gateway_name': 'gateway_1754379187311', 'zigbee_sn': 'GW1123C21122'}\ndevice_fixture = <page.page_device.DevicePage object at 0x1048a1010>\n\n    @allure.story('设备添加')\n    @allure.title('正常添加')\n    @pytest.mark.parametrize(\"case\", device_case_data)\n    def test_site_add_pass(self, case, device_fixture):\n        device_page = device_fixture\n        # 进行添加监测器的操作（sn、imei唯一）\n        case['gateway_name'] = 'gateway_'+str(int(time.time() * 1000))\n>       device_page.device_add(case['zigbee_sn'], case['gateway_name'])\n\ntestcase/test_3_device_add.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage/page_device.py:48: in device_add\n    self.click_to_add_device()\npage/page_device.py:29: in click_to_add_device\n    site_page.click_site_view()\npage/page_site.py:30: in click_site_view\n    self.click_element(sitelist.site, '电站列表')\ncommon/base_page.py:160: in click_element\n    self.save_scree_image(img_info)\ncommon/base_page.py:236: in save_scree_image\n    self.driver.save_screenshot(file_path)\n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:1021: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:996: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:1030: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:1040: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1048a0980>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000182ebe034 _pthread_start + 136\\\\n16  libsystem_pthread.dylib             0x0000000182eb8e3c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=138.0.7204.184)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010112a654 cxxbridge1$str$ptr + 2723108\nE       1   chromedriver                        0x00000001011228c8 cxxbridge1$str$ptr + 2690968\nE       2   chromedriver                        0x0000000100c76714 cxxbridge1$string$len + 90428\nE       3   chromedriver                        0x0000000100c50740 chromedriver + 132928\nE       4   chromedriver                        0x0000000100ce59e4 cxxbridge1$string$len + 545804\nE       5   chromedriver                        0x0000000100cfe908 cxxbridge1$string$len + 647984\nE       6   chromedriver                        0x0000000100cb19c8 cxxbridge1$string$len + 332784\nE       7   chromedriver                        0x00000001010ee278 cxxbridge1$str$ptr + 2476360\nE       8   chromedriver                        0x00000001010f150c cxxbridge1$str$ptr + 2489308\nE       9   chromedriver                        0x00000001010cfa64 cxxbridge1$str$ptr + 2351412\nE       10  chromedriver                        0x00000001010f1d94 cxxbridge1$str$ptr + 2491492\nE       11  chromedriver                        0x00000001010c0d58 cxxbridge1$str$ptr + 2290728\nE       12  chromedriver                        0x0000000101111d60 cxxbridge1$str$ptr + 2622512\nE       13  chromedriver                        0x0000000101111eec cxxbridge1$str$ptr + 2622908\nE       14  chromedriver                        0x0000000101122514 cxxbridge1$str$ptr + 2690020\nE       15  libsystem_pthread.dylib             0x0000000182ebe034 _pthread_start + 136\nE       16  libsystem_pthread.dylib             0x0000000182eb8e3c thread_start + 8\n\n../../../Library/Python/3.13/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchWindowException"}, "description": "设备添加", "attachments": [{"name": "log", "source": "bbaa77ed-8338-44df-ad53-abc6ffc9288b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "068420c8-d8cb-4597-838e-8777b91ea1d2-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "3a6dcbf4-4f37-4f83-88ec-77ba046531d3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'zigbee_sn': 'GW1123C21122'}"}], "start": 1754379187312, "stop": 1754379189321, "uuid": "23456b6f-7e6f-4b48-9311-de605739e315", "historyId": "c8dc8d40fe87ef8379102df00d1e4c45", "testCaseId": "c6a1806ae0fb7798c3aacd1c8317d5ea", "fullName": "testcase.test_3_device_add.TestDetector#test_site_add_pass", "labels": [{"name": "feature", "value": "设备"}, {"name": "story", "value": "设备添加"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_3_device_add"}, {"name": "subSuite", "value": "TestDetector"}, {"name": "host", "value": "mayundebijibendiannao.local"}, {"name": "thread", "value": "42814-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_3_device_add"}], "titlePath": ["testcase", "test_3_device_add.py", "TestDetector"]}